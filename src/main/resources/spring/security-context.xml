<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<security:authentication-manager>
		<security:authentication-provider>
<!-- 			<security:user-service>
				<security:user name="user1" authorities="ROLE_ADMIN" password="user1" />
				<security:user name="user2" authorities="ADMIN" password="user2" />
			</security:user-service>
			 -->
			<!-- users-by-username-query="select username, password, enabled from users where username=?" -->
			<!-- Since MySQL by  default is not case sensitive, hence we have to use 'binary' in front of the query object to ensure case sensitivity. -->
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from users where binary username = ?"
				authorities-by-username-query="select us.username, ur.authority from users us, authorities ur where binary us.username = ur.usernameFK and username =?"
				id="jdbcUserAuthService" />
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:debug/>
			<!-- This enables Access-control to methods -->
	<!-- Important to protect the Service Layer methods -->
	<!-- This (RoleVoter) requires user roles to begin with 'ROLES_' eg. 'ROLES_ADMIN','ROLES_USER' -->
	<!-- Can be changed by creating a 'roleVoter' Bean and changing prefix to 'blank' -->
	<security:global-method-security secured-annotations="enabled">
	</security:global-method-security>

	<security:http use-expressions="true">
		<!-- Spring will walk down this list, always ensure a catch-all /** at the bottom -->
		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/home" access="permitAll" />
		<!-- <security:intercept-url pattern="/resources/public/**" access="permitAll" /> -->
		<security:intercept-url pattern="/static/**" access="permitAll" />
		<!-- 
		<security:intercept-url pattern="/static/jquery/**" access="permitAll" />
		<security:intercept-url pattern="/static/js/**" access="permitAll" />
		 -->
		<!-- <security:intercept-url pattern="/js/**" access="permitAll" />
		<security:intercept-url pattern="/jquery/**" access="permitAll" />
		<security:intercept-url pattern="/fonts/**" access="permitAll" /> -->
		<security:intercept-url pattern="/login" access="permitAll" />
		<security:intercept-url pattern="/logout" access="permitAll" />
		<security:intercept-url pattern="/newaccount" access="permitAll" />
		<security:intercept-url pattern="/createAccount" access="permitAll" />
		<security:intercept-url pattern="/listAllEmployees" access="permitAll" />
		<security:intercept-url pattern="/listAllEmployeeDetails" access="permitAll" />
		<security:intercept-url pattern="/listAllEmployeeDetails" access="permitAll" />
		<security:intercept-url pattern="/denied" access="permitAll" />

		<security:intercept-url pattern="/addNewEmployee" access="isAuthenticated()" />
		<security:intercept-url pattern="/showEmployeeForm" access="isAuthenticated()" />
		<security:intercept-url pattern="/admin" access="hasRole('ADMIN')" /> <!-- can use Spring Security Patterns -->
		<security:intercept-url pattern="/delete/**" access="hasRole('ADMIN')" /> <!-- can use Spring Security Patterns -->

		
		<security:intercept-url pattern="/**" access="denyAll" />
		<!-- Adding a failure url-parameter that returns true if authentication fails, but the form is the same '/login' -->
		<security:form-login login-page="/login"
			authentication-failure-url="/login?error=true"
			username-parameter="username" password-parameter="password" />
		<security:logout logout-success-url="/logout"
			invalidate-session="true" />
		<security:access-denied-handler error-page="/denied" />
		<security:remember-me key="employeeAppKey"
			user-service-ref="jdbcUserAuthService" />
	</security:http>
	
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<!-- Can also use BCryptPasswordEncoder class -->
	</bean>
</beans>
